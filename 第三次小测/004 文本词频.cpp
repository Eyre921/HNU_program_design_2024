#include <bits/stdc++.h>  // 引入所有常用的 C++ 标准库
using namespace std;  // 使用标准命名空间

int n, m;  // n 是文章的篇数，m 是单词的最大编号
vector<set<int> > words_in_article(10000);  // 用来存储每个单词在哪些文章中出现，set 用来去重
vector<int> words_in_all(10000, 0);  // 用来记录每个单词在所有文章中出现的总次数，初始为 0

int main()
{
    cin >> n >> m;  // 输入文章数 n 和单词数 m
    int a[n];  // 数组 a 用来存储每篇文章包含的单词数
    for (int i = 0; i < n; i++)
    {
        cin >> a[i];  // 输入每篇文章的长度（包含的单词个数）
        for (int j = 0; j < a[i]; j++)
        {
            int t;
            cin >> t;  // 输入单词编号 t
            words_in_article[t].insert(i);  // 将该单词出现的文章编号存入 set 中（自动去重）
            words_in_all[t]++;  // 该单词在所有文章中的出现次数加 1
        }
    }

    // 输出每个单词的信息
    for (int i = 1; i <= m; i++)
    {
        cout << words_in_article[i].size() << " " << words_in_all[i] << endl;  // 输出该单词出现在多少篇文章中和总共出现多少次
    }
}

/*
4 3
5 1 2 3 2 1
1 1
3 2 2 2
2 3 2
 */
/*
【问题描述】

在学习了文本处理后，小 P 对英语书中的 n 篇文章进行了初步整理。具体来说，小P 将所有的英文单词都转化为了整数编号。

假设这 n 篇文章中共出现了 m 个不同的单词，则把它们从 1 到 m 进行编号。这样，每篇文章就简化为了一个整数序列，其中每个数都在 1 到 m 范围内。

现给出小 P 处理后的 n 篇文章，对于每个单词 i（1 ≤ i ≤ m），试统计：

1. 单词 i 出现在了多少篇文章中？

2. 单词 i 在全部文章中总共出现了几次？


【输入形式】

从标准输入读入数据。输入共 n + 1 行。

输入的第一行包含两个正整数 n 和 m，分别表示文章篇数和单词编号上限。

输入的第 i + 1 行（1 ≤ i ≤ n）包含由空格分隔的若干整数，其中第一个整数 li 表示第 i 篇文章的长度（单词个数）；接下来 li  个整数表示对应的整数序列，序列中每个整数均在 1 到 m 范围内，各对应原文中的一个单词。


【输出形式】

输出到标准输出。输出共 m 行。

第 i 行（1 ≤ i ≤ m）输出由空格分隔的两个整数 xi 和 yi，表示共有 xi 篇文章包含单词 i，总计出现次数为 yi。

【样例输入】

4

3


5

1

2 3 2 1

1

1


3

2

2 2

2

3

2

【样例输出】

2 3

3 6

2 2


【样例说明】

单词 2 在：

• 文章 1 中出现两次；

• 文章 3 中出现三次；

• 文章 4 中出现一次。因此 x2 = 3、y2 = 6。



【子任务】

全部的测试数据满足 0 < n, m ≤ 100，且每篇文章至少包含一个单词、最多不超过

100 个单词（1 ≤ li  ≤ 100）。
 */
